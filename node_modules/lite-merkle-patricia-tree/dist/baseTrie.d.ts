/// <reference types="node" />
import { TrieNode, EmbeddedNode, Nibbles } from './trieNode';
declare type BatchDBOp = PutBatch | DelBatch;
interface PutBatch {
    type: 'put';
    key: Buffer;
    value: Buffer;
}
interface DelBatch {
    type: 'del';
    key: Buffer;
}
/**
 * DB is a wrapper around the underlying in memory Map db.
 * It is a replacement for leveldb or memdown used in https://github.com/ethereumjs/ethereumjs-monorepo/blob/master/packages/trie/src/db.ts
 */
declare class DB {
    _db: Map<string, Buffer>;
    /**
     * Initialize a DB instance.
     */
    constructor();
    /**
     * Retrieves a raw value from db.
     * @param key
     * @returns `Buffer` if a value is found or `undefined` if no value is found.
     */
    get(key: Buffer): Buffer | undefined;
    /**
     * Writes a value directly to db.
     * @param key The key as a `Buffer`
     * @param value The value `Buffer` to be stored
     */
    put(key: Buffer, val: Buffer): void;
    /**
     * Removes a raw value in the underlying db.
     * @param keys
     */
    del(key: Buffer): void;
    /**
     * Performs a batch operation on db.
     * @param opStack A stack of operations
     */
    batch(opStack: BatchDBOp[]): void;
}
export declare type Proof = Buffer[];
interface Path {
    node: TrieNode | null;
    remaining: Nibbles;
    stack: TrieNode[];
}
/**
 * The basic Trie interface, use with `import { Trie } from './merkle-patricia-tree'`.
 * Light weight and synchronous implementation of the Ethereum modified Merkle Patricia Tree.
 * Most of the core logic is taken from `https://github.com/ethereumjs/ethereumjs-monorepo`.
 * Replaces database and async logic with a simple Map to temporarily store trie nodes.
 * This implementation is for one time use cases: put serialized BlockReceipts
 * in the Trie and build an inclusion proof with `findPath`.
 */
export declare class Trie {
    /** The key value Map storing Trie nodes */
    db: DB;
    /** The root for an empty trie */
    EMPTY_TRIE_ROOT: Buffer;
    private _root;
    /**
     * Initialize a Trie instance
     */
    constructor();
    /**
     * Gets the current root of the `trie`
     */
    get root(): Buffer;
    /**
     * Trie has no checkpointing so return false
     */
    get isCheckpoint(): Boolean;
    /**
     * Gets a value given a `key`
     * @param key - the key to search for
     * @returns `Buffer` if a value was found or `null` if no value was found.
     */
    get(key: Buffer): Buffer | null;
    /**
     * Stores a given `value` at the given `key`.
     * @param key
     * @param value
     */
    put(key: Buffer, value: Buffer): void;
    /**
     * Deletes a value given a `key`.
     * @param key
     */
    del(key: Buffer): void;
    /**
     * Retrieves a node from db by hash.
     */
    lookupNode(node: Buffer | Buffer[]): TrieNode | null;
    /**
     * Tries to find a path to the node for the given key.
     * It returns a `stack` of nodes to the closest node.
     * @param key - the search key
     */
    findPath(key: Buffer): Path;
    /**
     * Creates the initial node from an empty tree.
     * @private
     */
    _createInitialNode(key: Buffer, value: Buffer): void;
    /**
     * Updates a node.
     * @private
     * @param key
     * @param value
     * @param keyRemainder
     * @param stack
     */
    _updateNode(k: Buffer, value: Buffer, keyRemainder: Nibbles, stack: TrieNode[]): void;
    /**
     * Deletes a node from the database.
     * @private
     */
    _deleteNode(k: Buffer, stack: TrieNode[]): void;
    /**
     * Saves a stack of nodes to the database.
     * @private
     * @param key - the key. Should follow the stack
     * @param stack - a stack of nodes to the value given by the key
     * @param opStack - a stack of levelup operations to commit at the end of this funciton
     */
    _saveStack(key: Nibbles, stack: TrieNode[], opStack: BatchDBOp[]): void;
    /**
     * Formats node to be saved by `db.batch`.
     * @private
     * @param node - the node to format.
     * @param topLevel - if the node is at the top level.
     * @param opStack - the opStack to push the node's data.
     * @param remove - whether to remove the node (only used for CheckpointTrie).
     * @returns The node's hash used as the key or the rawNode.
     */
    _formatNode(node: TrieNode, topLevel: boolean, opStack: BatchDBOp[], remove?: boolean): Buffer | Array<EmbeddedNode | null>;
}
export {};
//# sourceMappingURL=baseTrie.d.ts.map