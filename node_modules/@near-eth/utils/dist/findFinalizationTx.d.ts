import { ethers } from 'ethers';
export declare class SearchError extends Error {
}
export declare function findFinalizationTxOnNear({ proof, connectorAccount, eventRelayerAccount, finalizationMethod, callIndexer }: {
    proof: string;
    connectorAccount: string;
    eventRelayerAccount: string;
    finalizationMethod: string;
    callIndexer: (query: string) => Promise<Array<{
        originated_from_transaction_hash: string;
        included_in_block_timestamp: string;
    }>>;
}): Promise<{
    transactions: string[];
    timestamps: number[];
}>;
export declare function findFinalizationTxOnEthereum({ usedProofPosition, proof, connectorAddress, connectorAbi, finalizationEvent, recipient, amount, provider }: {
    usedProofPosition: string;
    proof: {
        outcome_proof: {
            outcome: {
                receipt_ids: string[];
            };
        };
    };
    connectorAddress: string;
    connectorAbi: string;
    finalizationEvent: string;
    recipient: string;
    amount: string;
    provider: ethers.providers.Provider;
}): Promise<{
    transactions: string[];
    block: ethers.providers.Block;
}>;
//# sourceMappingURL=findFinalizationTx.d.ts.map