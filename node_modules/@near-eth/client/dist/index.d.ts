import { ConnectorLib, Transfer, DecoratedTransfer, UnsavedTransfer, CustomTransferTypes } from './types';
export { onChange } from './storage';
export { setEthProvider, setNearConnection, setAuroraProvider, setSignerProvider, getSignerProvider, getEthProvider, getAuroraProvider, getBridgeParams, setBridgeParams } from './utils';
export declare function setTransferTypes(newTransferTypes: CustomTransferTypes): CustomTransferTypes;
/**
 * Get the connector library for the given transfer's type
 * @param transfer Transfer object
 */
export declare function getTransferType(transfer: Transfer): ConnectorLib;
/**
 * Return a list of transfers
 *
 * @param {object} params Object of options
 * @param params.filter function Optional filter function
 *
 * @example
 *
 *     import { get } from '@near-eth/client'
 *     import { IN_PROGRESS, ACTION_NEEDED } from '@near-eth/client/dist/statuses'
 *     const inFlight = await get({
 *       filter: t => [IN_PROGRESS, ACTION_NEEDED].includes(t.status)
 *     })
 *
 * @returns array of transfers
 */
export declare function get({ filter }?: {
    filter?: (t: Transfer) => boolean;
}): Transfer[];
export declare function decorate(transfer: Transfer, { locale }?: {
    locale?: string;
}): DecoratedTransfer;
/**
 * Record a transfer to be removed at the next status check.
 * This remove request will not be processed immediatly (at the next checkStatus loop)
 * so apps may want to manually hide the transfer until it actually gets removed from storage.
 * @param transferId
 */
export declare function remove(transferId: string): void;
export declare function replaceTransfers(transfers: Transfer[]): void;
export declare function getReplacementTransfers(): Transfer[];
export declare function checkStatusAll({ loop }?: {
    loop?: number;
}): Promise<void>;
export declare function act(id: string): Promise<void>;
/**
 * Clear a transfer from localStorage
 */
export declare function clear(id: string): Promise<void>;
/**
 * Add a new transfer to the set of cached local transfers. Transfer will
 * be given a chronologically-ordered id.
 *
 * @param transfer {@link UnsavedTransfer} a transfer with no 'id'
 *
 * @returns {@link Transfer} transfer with an 'id'
 */
export declare function track(transferRaw: UnsavedTransfer): Promise<Transfer>;
/**
 * Delete a transfer from the set of cached local transfers.
 * Unlike `remove` which removes at the next checkStatus loop, untrack
 * returns when the transfer is removed.
 *
 * @param transferId
 */
export declare function untrack(transferId: string): Promise<void>;
//# sourceMappingURL=index.d.ts.map