import { Transfers, Transfer } from './types';
/**
 * Get raw transfers, stored in localStorage as an object indexed by keys
 * Default sort: descending by ID, which corresponds with time created
 */
export declare function getAll(): Transfer[];
/**
 * Get a transfer from, localStorage
 * @param id Transfer id
 */
export declare function get(id: string): Transfer | undefined;
/**
 * Add a transfer to localStorage transfers
 * @param transfer Transfer to record
 */
export declare function add(transfer: Transfer): Promise<void>;
/**
 * Update a given transfer in localStorage, returning a new object with the
 * updated version
 * @param transfer Transfer to update
 * @param withData Data to update the transfer with
 */
export declare function update(transfer: Transfer, withData?: object): Promise<Transfer>;
/**
 * Clear a transfer from localStorage
 * @param id Transfer if to delete
 */
export declare function clear(id: string): Promise<void>;
export declare function replaceAll(transfers: Transfers): Promise<Transfers>;
/**
 * Add a function to be called any time the data in storage is updated
 * @param fn Function to add
 */
export declare function onChange(fn: () => unknown): void;
//# sourceMappingURL=storage.d.ts.map