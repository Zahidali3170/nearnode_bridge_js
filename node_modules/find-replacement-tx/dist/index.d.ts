import { ethers } from 'ethers';
export declare class SearchError extends Error {
}
export declare class TxValidationError extends Error {
}
/**
 * Binary search a trasaction with `nonce` and `from`
 * @param provider Web3 provider
 * @param startSearch Block height of lower bound search limit
 * @param from Signer of the transaction searched
 * @param nonce Nonce of the transaction searched
 */
export declare function getTransactionByNonce(provider: ethers.providers.Provider, startSearch: number, from: string, nonce: number): Promise<ethers.providers.TransactionResponse | null>;
/**
 * Search and validate a replaced transaction (speed up)
 * @param provider Web3 provider
 * @param startSearch Lower search bound
 * @param tx.from Signer of the transaction searched
 * @param tx.to Recipient: multisig, erc20...
 * @param tx.nonce Nonce of the transaction searched
 * @param tx.data Input data of the transaction searched
 * @param tx.value Wei value transfered of the transaction searched
 * @param event.name Name of event expected if tx was speed up
 * @param event.abi Abi of contract emitting event
 * @param event.address Address of contract emitting the event
 * @param event.validate Function to validate the content of event
 */
export declare function findReplacementTx(provider: any, startSearch: number, tx: {
    from: string;
    to: string;
    nonce: number;
    data?: string;
    value?: string;
}, event?: {
    name: string;
    abi: string;
    address: string;
    validate: ({ returnValues }: {
        returnValues: any;
    }) => boolean;
}): Promise<ethers.providers.TransactionResponse | null>;
//# sourceMappingURL=index.d.ts.map